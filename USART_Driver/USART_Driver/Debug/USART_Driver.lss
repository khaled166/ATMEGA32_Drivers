
USART_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000001ec  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f8  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cf  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004cb  00000000  00000000  0000133b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001808  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003eb  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000297  00000000  00000000  00001cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00001f76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  7a:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_SetPinDir>:
void DIO_SetPinDir(uint8 Port ,uint8 Pin , uint8 Dir)
{



	switch (Dir)
  82:	44 23       	and	r20, r20
  84:	b9 f1       	breq	.+110    	; 0xf4 <DIO_SetPinDir+0x72>
  86:	41 30       	cpi	r20, 0x01	; 1
  88:	09 f0       	breq	.+2      	; 0x8c <DIO_SetPinDir+0xa>
  8a:	6b c0       	rjmp	.+214    	; 0x162 <DIO_SetPinDir+0xe0>


	case DIO_PIN_OUTPUT :


		switch (Port)
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	89 f0       	breq	.+34     	; 0xb2 <DIO_SetPinDir+0x30>
  90:	28 f0       	brcs	.+10     	; 0x9c <DIO_SetPinDir+0x1a>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	c9 f0       	breq	.+50     	; 0xc8 <DIO_SetPinDir+0x46>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	11 f1       	breq	.+68     	; 0xde <DIO_SetPinDir+0x5c>
  9a:	08 95       	ret
		{
		case DIO_PORTA :

			SET_BIT(DDRA,Pin);
  9c:	2a b3       	in	r18, 0x1a	; 26
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SetPinDir+0x26>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SetPinDir+0x22>
  ac:	82 2b       	or	r24, r18
  ae:	8a bb       	out	0x1a, r24	; 26

			break;
  b0:	08 95       	ret

		case DIO_PORTB :

			SET_BIT(DDRB,Pin);
  b2:	27 b3       	in	r18, 0x17	; 23
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_SetPinDir+0x3c>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_SetPinDir+0x38>
  c2:	82 2b       	or	r24, r18
  c4:	87 bb       	out	0x17, r24	; 23

			break;
  c6:	08 95       	ret

		case DIO_PORTC :

			SET_BIT(DDRC,Pin);
  c8:	24 b3       	in	r18, 0x14	; 20
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_SetPinDir+0x52>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_SetPinDir+0x4e>
  d8:	82 2b       	or	r24, r18
  da:	84 bb       	out	0x14, r24	; 20

			break;
  dc:	08 95       	ret

		case DIO_PORTD :

			SET_BIT(DDRD,Pin);
  de:	21 b3       	in	r18, 0x11	; 17
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_SetPinDir+0x68>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_SetPinDir+0x64>
  ee:	82 2b       	or	r24, r18
  f0:	81 bb       	out	0x11, r24	; 17

			break;
  f2:	08 95       	ret
		break;

		case DIO_PIN_INPUT :


			switch (Port)
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	91 f0       	breq	.+36     	; 0x11c <DIO_SetPinDir+0x9a>
  f8:	28 f0       	brcs	.+10     	; 0x104 <DIO_SetPinDir+0x82>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	d9 f0       	breq	.+54     	; 0x134 <DIO_SetPinDir+0xb2>
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	29 f1       	breq	.+74     	; 0x14c <DIO_SetPinDir+0xca>
 102:	08 95       	ret
			{
			case DIO_PORTA :

				CLR_BIT(DDRA,Pin);
 104:	2a b3       	in	r18, 0x1a	; 26
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_SetPinDir+0x8e>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_SetPinDir+0x8a>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	8a bb       	out	0x1a, r24	; 26

				break;
 11a:	08 95       	ret

			case DIO_PORTB :

				CLR_BIT(DDRB,Pin);
 11c:	27 b3       	in	r18, 0x17	; 23
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPinDir+0xa6>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPinDir+0xa2>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	87 bb       	out	0x17, r24	; 23

				break;
 132:	08 95       	ret

			case DIO_PORTC :

				CLR_BIT(DDRC,Pin);
 134:	24 b3       	in	r18, 0x14	; 20
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_SetPinDir+0xbe>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_SetPinDir+0xba>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	84 bb       	out	0x14, r24	; 20

				break;
 14a:	08 95       	ret

			case DIO_PORTD :

				CLR_BIT(DDRD,Pin);
 14c:	21 b3       	in	r18, 0x11	; 17
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_SetPinDir+0xd6>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_SetPinDir+0xd2>
 15c:	80 95       	com	r24
 15e:	82 23       	and	r24, r18
 160:	81 bb       	out	0x11, r24	; 17
 162:	08 95       	ret

00000164 <main>:

#include "UART.h"

int main(void)
{
	USART_INIT();
 164:	0e 94 b9 00 	call	0x172	; 0x172 <USART_INIT>
	
	USART_TX_STRING("hello");
 168:	80 e6       	ldi	r24, 0x60	; 96
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <USART_TX_STRING>
 170:	ff cf       	rjmp	.-2      	; 0x170 <main+0xc>

00000172 <USART_INIT>:
//Transmit Data bit by bit 
void USART_TX_CHAR(uint8 data){
	
	while(GET_BIT(UCSRA,5)==0);
	 
	 UDR = data;
 172:	80 b5       	in	r24, 0x20	; 32
 174:	8f 7b       	andi	r24, 0xBF	; 191
 176:	80 bd       	out	0x20, r24	; 32
 178:	80 b5       	in	r24, 0x20	; 32
 17a:	80 68       	ori	r24, 0x80	; 128
 17c:	80 bd       	out	0x20, r24	; 32
 17e:	80 b5       	in	r24, 0x20	; 32
 180:	8f 7e       	andi	r24, 0xEF	; 239
 182:	80 bd       	out	0x20, r24	; 32
 184:	80 b5       	in	r24, 0x20	; 32
 186:	8f 7d       	andi	r24, 0xDF	; 223
 188:	80 bd       	out	0x20, r24	; 32
 18a:	80 b5       	in	r24, 0x20	; 32
 18c:	87 7f       	andi	r24, 0xF7	; 247
 18e:	80 bd       	out	0x20, r24	; 32
 190:	80 b5       	in	r24, 0x20	; 32
 192:	82 60       	ori	r24, 0x02	; 2
 194:	80 bd       	out	0x20, r24	; 32
 196:	80 b5       	in	r24, 0x20	; 32
 198:	84 60       	ori	r24, 0x04	; 4
 19a:	80 bd       	out	0x20, r24	; 32
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 1a6:	53 9a       	sbi	0x0a, 3	; 10
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	83 e0       	ldi	r24, 0x03	; 3
 1ae:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 1b2:	54 9a       	sbi	0x0a, 4	; 10
 1b4:	50 98       	cbi	0x0a, 0	; 10
 1b6:	51 98       	cbi	0x0a, 1	; 10
 1b8:	57 98       	cbi	0x0a, 7	; 10
 1ba:	55 98       	cbi	0x0a, 5	; 10
 1bc:	5c 98       	cbi	0x0b, 4	; 11
 1be:	5b 98       	cbi	0x0b, 3	; 11
 1c0:	5a 98       	cbi	0x0b, 2	; 11
 1c2:	59 98       	cbi	0x0b, 1	; 11
 1c4:	58 98       	cbi	0x0b, 0	; 11
 1c6:	87 e6       	ldi	r24, 0x67	; 103
 1c8:	89 b9       	out	0x09, r24	; 9
 1ca:	08 95       	ret

000001cc <USART_TX_STRING>:
}

//Transmit Data complete String
void USART_TX_STRING(uint8 *str){
 1cc:	dc 01       	movw	r26, r24
	
	uint8 i=0;
	while(str[i]!='\0'){
 1ce:	9c 91       	ld	r25, X
 1d0:	99 23       	and	r25, r25
 1d2:	49 f0       	breq	.+18     	; 0x1e6 <USART_TX_STRING+0x1a>
 1d4:	20 e0       	ldi	r18, 0x00	; 0
		UDR = str[i];
 1d6:	9c b9       	out	0x0c, r25	; 12
		i++;
 1d8:	2f 5f       	subi	r18, 0xFF	; 255

//Transmit Data complete String
void USART_TX_STRING(uint8 *str){
	
	uint8 i=0;
	while(str[i]!='\0'){
 1da:	fd 01       	movw	r30, r26
 1dc:	e2 0f       	add	r30, r18
 1de:	f1 1d       	adc	r31, r1
 1e0:	90 81       	ld	r25, Z
 1e2:	91 11       	cpse	r25, r1
 1e4:	f8 cf       	rjmp	.-16     	; 0x1d6 <USART_TX_STRING+0xa>
 1e6:	08 95       	ret

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
