
ServoMotor_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000956  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000702  00000000  00000000  00000c92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c5  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  0000185c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042b  00000000  00000000  0000196c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a4  00000000  00000000  00001d97  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000203b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  64:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPinDir>:
void DIO_SetPinDir(uint8 Port ,uint8 Pin , uint8 Dir)
{



	switch (Dir)
  6c:	44 23       	and	r20, r20
  6e:	b9 f1       	breq	.+110    	; 0xde <DIO_SetPinDir+0x72>
  70:	41 30       	cpi	r20, 0x01	; 1
  72:	09 f0       	breq	.+2      	; 0x76 <DIO_SetPinDir+0xa>
  74:	6b c0       	rjmp	.+214    	; 0x14c <DIO_SetPinDir+0xe0>


	case DIO_PIN_OUTPUT :


		switch (Port)
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	89 f0       	breq	.+34     	; 0x9c <DIO_SetPinDir+0x30>
  7a:	28 f0       	brcs	.+10     	; 0x86 <DIO_SetPinDir+0x1a>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	c9 f0       	breq	.+50     	; 0xb2 <DIO_SetPinDir+0x46>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	11 f1       	breq	.+68     	; 0xc8 <DIO_SetPinDir+0x5c>
  84:	08 95       	ret
		{
		case DIO_PORTA :

			SET_BIT(DDRA,Pin);
  86:	2a b3       	in	r18, 0x1a	; 26
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_SetPinDir+0x26>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_SetPinDir+0x22>
  96:	82 2b       	or	r24, r18
  98:	8a bb       	out	0x1a, r24	; 26

			break;
  9a:	08 95       	ret

		case DIO_PORTB :

			SET_BIT(DDRB,Pin);
  9c:	27 b3       	in	r18, 0x17	; 23
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SetPinDir+0x3c>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SetPinDir+0x38>
  ac:	82 2b       	or	r24, r18
  ae:	87 bb       	out	0x17, r24	; 23

			break;
  b0:	08 95       	ret

		case DIO_PORTC :

			SET_BIT(DDRC,Pin);
  b2:	24 b3       	in	r18, 0x14	; 20
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_SetPinDir+0x52>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_SetPinDir+0x4e>
  c2:	82 2b       	or	r24, r18
  c4:	84 bb       	out	0x14, r24	; 20

			break;
  c6:	08 95       	ret

		case DIO_PORTD :

			SET_BIT(DDRD,Pin);
  c8:	21 b3       	in	r18, 0x11	; 17
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_SetPinDir+0x68>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_SetPinDir+0x64>
  d8:	82 2b       	or	r24, r18
  da:	81 bb       	out	0x11, r24	; 17

			break;
  dc:	08 95       	ret
		break;

		case DIO_PIN_INPUT :


			switch (Port)
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 f0       	breq	.+36     	; 0x106 <DIO_SetPinDir+0x9a>
  e2:	28 f0       	brcs	.+10     	; 0xee <DIO_SetPinDir+0x82>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	d9 f0       	breq	.+54     	; 0x11e <DIO_SetPinDir+0xb2>
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	29 f1       	breq	.+74     	; 0x136 <DIO_SetPinDir+0xca>
  ec:	08 95       	ret
			{
			case DIO_PORTA :

				CLR_BIT(DDRA,Pin);
  ee:	2a b3       	in	r18, 0x1a	; 26
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_SetPinDir+0x8e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_SetPinDir+0x8a>
  fe:	80 95       	com	r24
 100:	82 23       	and	r24, r18
 102:	8a bb       	out	0x1a, r24	; 26

				break;
 104:	08 95       	ret

			case DIO_PORTB :

				CLR_BIT(DDRB,Pin);
 106:	27 b3       	in	r18, 0x17	; 23
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_SetPinDir+0xa6>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_SetPinDir+0xa2>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	87 bb       	out	0x17, r24	; 23

				break;
 11c:	08 95       	ret

			case DIO_PORTC :

				CLR_BIT(DDRC,Pin);
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_SetPinDir+0xbe>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_SetPinDir+0xba>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	84 bb       	out	0x14, r24	; 20

				break;
 134:	08 95       	ret

			case DIO_PORTD :

				CLR_BIT(DDRD,Pin);
 136:	21 b3       	in	r18, 0x11	; 17
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_SetPinDir+0xd6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_SetPinDir+0xd2>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	08 95       	ret

0000014e <main>:
#include "Servo_Motor.h"


int main(void)
{
	Servo_init();
 14e:	0e 94 ad 00 	call	0x15a	; 0x15a <Servo_init>
	Servo_Posetion(25);
 152:	89 e1       	ldi	r24, 0x19	; 25
 154:	0e 94 b5 00 	call	0x16a	; 0x16a <Servo_Posetion>
 158:	ff cf       	rjmp	.-2      	; 0x158 <main+0xa>

0000015a <Servo_init>:

#include "Servo_Motor.h"

void Servo_init(void){
	
	DIO_SetPinDir(DIO_PORTD,DIO_PIN5,DIO_PIN_OUTPUT);
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	65 e0       	ldi	r22, 0x05	; 5
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDir>
	TIMER1_INIT();
 164:	0e 94 c6 00 	call	0x18c	; 0x18c <TIMER1_INIT>
 168:	08 95       	ret

0000016a <Servo_Posetion>:
}
void Servo_Posetion(sint8 Degree){
	
	OCR1A+=Degree/4;
 16a:	2a b5       	in	r18, 0x2a	; 42
 16c:	3b b5       	in	r19, 0x2b	; 43
 16e:	98 2f       	mov	r25, r24
 170:	88 23       	and	r24, r24
 172:	14 f4       	brge	.+4      	; 0x178 <Servo_Posetion+0xe>
 174:	93 e0       	ldi	r25, 0x03	; 3
 176:	98 0f       	add	r25, r24
 178:	95 95       	asr	r25
 17a:	95 95       	asr	r25
 17c:	a9 01       	movw	r20, r18
 17e:	49 0f       	add	r20, r25
 180:	51 1d       	adc	r21, r1
 182:	97 fd       	sbrc	r25, 7
 184:	5a 95       	dec	r21
 186:	5b bd       	out	0x2b, r21	; 43
 188:	4a bd       	out	0x2a, r20	; 42
 18a:	08 95       	ret

0000018c <TIMER1_INIT>:
	  SET_BIT(TCCR1B,3);
	  SET_BIT(TCCR1B,4);
	  
	  #elif  TIMER1_MODE  == FAST_PWM1
	  
	  SET_BIT(TCCR1A,1);
 18c:	8f b5       	in	r24, 0x2f	; 47
 18e:	82 60       	ori	r24, 0x02	; 2
 190:	8f bd       	out	0x2f, r24	; 47
	  SET_BIT(TCCR1B,3);
 192:	8e b5       	in	r24, 0x2e	; 46
 194:	88 60       	ori	r24, 0x08	; 8
 196:	8e bd       	out	0x2e, r24	; 46
	  SET_BIT(TCCR1B,4);
 198:	8e b5       	in	r24, 0x2e	; 46
 19a:	80 61       	ori	r24, 0x10	; 16
 19c:	8e bd       	out	0x2e, r24	; 46
	
	SET_BIT(TCCR1A,6);
	
	#elif  OC1_STATUS  ==  Clear_OC1A_ONMATCH
	
	SET_BIT(TCCR1A,7);
 19e:	8f b5       	in	r24, 0x2f	; 47
 1a0:	80 68       	ori	r24, 0x80	; 128
 1a2:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,0);
	SET_BIT(TCCR1B,1);
	
	#elif  	CLK_SELECTION==   PRESACLER_256_CLK

	SET_BIT(TCCR1B,2);
 1a4:	8e b5       	in	r24, 0x2e	; 46
 1a6:	84 60       	ori	r24, 0x04	; 4
 1a8:	8e bd       	out	0x2e, r24	; 46


    //FORCE OUTPUT COMPARE CHANNEL A.
	#if  Foc1_STATUS ==  DISABLE_FOC1A

	CLR_BIT(TCCR1A,3);
 1aa:	8f b5       	in	r24, 0x2f	; 47
 1ac:	87 7f       	andi	r24, 0xF7	; 247
 1ae:	8f bd       	out	0x2f, r24	; 47
	
	/****************************************************************   TIMER1_INTERRUPT STATUS   **************************************************************/

	#if   INTERRUPT_STATUS  ==  DISABLE_TOIE1

	CLR_BIT(TIMSK,2);
 1b0:	89 b7       	in	r24, 0x39	; 57
 1b2:	8b 7f       	andi	r24, 0xFB	; 251
 1b4:	89 bf       	out	0x39, r24	; 57
 1b6:	08 95       	ret

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
