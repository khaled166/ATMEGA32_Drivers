
DCmotor_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000033c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bad  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ab  00000000  00000000  00001089  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000555  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000015c  00000000  00000000  00001d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000477  00000000  00000000  00001ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c0  00000000  00000000  0000235f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  0000271f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 56 01 	call	0x2ac	; 0x2ac <main>
  74:	0c 94 9c 01 	jmp	0x338	; 0x338 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DCmotor_init>:



void DCmotor_init(void){
	
	    DIO_SetPinDir(DIO_PORTC,DIO_PIN3,DIO_PIN_OUTPUT);
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	63 e0       	ldi	r22, 0x03	; 3
  80:	82 e0       	ldi	r24, 0x02	; 2
  82:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_SetPinDir>
		DIO_SetPinDir(DIO_PORTC,DIO_PIN4,DIO_PIN_OUTPUT);
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	64 e0       	ldi	r22, 0x04	; 4
  8a:	82 e0       	ldi	r24, 0x02	; 2
  8c:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_SetPinDir>
		DIO_SetPinDir(DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT);
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	63 e0       	ldi	r22, 0x03	; 3
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_SetPinDir>
		
		TIMER0_INIT();
  9a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <TIMER0_INIT>
  9e:	08 95       	ret

000000a0 <DCmotor_Direction>:

}

void DCmotor_Direction(uint32 dir){
	
	switch(dir){
  a0:	61 15       	cp	r22, r1
  a2:	71 05       	cpc	r23, r1
  a4:	81 05       	cpc	r24, r1
  a6:	91 05       	cpc	r25, r1
  a8:	31 f0       	breq	.+12     	; 0xb6 <DCmotor_Direction+0x16>
  aa:	61 30       	cpi	r22, 0x01	; 1
  ac:	71 05       	cpc	r23, r1
  ae:	81 05       	cpc	r24, r1
  b0:	91 05       	cpc	r25, r1
  b2:	61 f0       	breq	.+24     	; 0xcc <DCmotor_Direction+0x2c>
  b4:	08 95       	ret
	
	   case   clk_wise_dir:
	   DIO_WritePin(DIO_PORTC,DIO_PIN3,DIO_PIN_HIGH);
  b6:	41 e0       	ldi	r20, 0x01	; 1
  b8:	63 e0       	ldi	r22, 0x03	; 3
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_WritePin>
	   DIO_WritePin(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	64 e0       	ldi	r22, 0x04	; 4
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_WritePin>
	      break;
  ca:	08 95       	ret
		  
	case   Anti_clkwise_dir:
	DIO_WritePin(DIO_PORTC,DIO_PIN4,DIO_PIN_HIGH);
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	64 e0       	ldi	r22, 0x04	; 4
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_WritePin>
	DIO_WritePin(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	63 e0       	ldi	r22, 0x03	; 3
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_WritePin>
  e0:	08 95       	ret

000000e2 <DCmotor_Move>:
	
}

void DCmotor_Move(uint32 speed){
	
	PWM0_Generate(speed);
  e2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <PWM0_Generate>
  e6:	08 95       	ret

000000e8 <DIO_SetPinDir>:

		break;

	case DIO_PORTD :

		PORTD = Val;
  e8:	44 23       	and	r20, r20
  ea:	b9 f1       	breq	.+110    	; 0x15a <DIO_SetPinDir+0x72>
  ec:	41 30       	cpi	r20, 0x01	; 1
  ee:	09 f0       	breq	.+2      	; 0xf2 <DIO_SetPinDir+0xa>
  f0:	6b c0       	rjmp	.+214    	; 0x1c8 <DIO_SetPinDir+0xe0>
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	89 f0       	breq	.+34     	; 0x118 <DIO_SetPinDir+0x30>
  f6:	28 f0       	brcs	.+10     	; 0x102 <DIO_SetPinDir+0x1a>
  f8:	82 30       	cpi	r24, 0x02	; 2
  fa:	c9 f0       	breq	.+50     	; 0x12e <DIO_SetPinDir+0x46>
  fc:	83 30       	cpi	r24, 0x03	; 3
  fe:	11 f1       	breq	.+68     	; 0x144 <DIO_SetPinDir+0x5c>
 100:	08 95       	ret
 102:	2a b3       	in	r18, 0x1a	; 26
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_SetPinDir+0x26>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_SetPinDir+0x22>
 112:	82 2b       	or	r24, r18
 114:	8a bb       	out	0x1a, r24	; 26
 116:	08 95       	ret
 118:	27 b3       	in	r18, 0x17	; 23
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_SetPinDir+0x3c>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_SetPinDir+0x38>
 128:	82 2b       	or	r24, r18
 12a:	87 bb       	out	0x17, r24	; 23
 12c:	08 95       	ret
 12e:	24 b3       	in	r18, 0x14	; 20
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPinDir+0x52>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPinDir+0x4e>
 13e:	82 2b       	or	r24, r18
 140:	84 bb       	out	0x14, r24	; 20
 142:	08 95       	ret
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_SetPinDir+0x68>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_SetPinDir+0x64>
 154:	82 2b       	or	r24, r18
 156:	81 bb       	out	0x11, r24	; 17
 158:	08 95       	ret
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	91 f0       	breq	.+36     	; 0x182 <DIO_SetPinDir+0x9a>
 15e:	28 f0       	brcs	.+10     	; 0x16a <DIO_SetPinDir+0x82>
 160:	82 30       	cpi	r24, 0x02	; 2
 162:	d9 f0       	breq	.+54     	; 0x19a <DIO_SetPinDir+0xb2>
 164:	83 30       	cpi	r24, 0x03	; 3
 166:	29 f1       	breq	.+74     	; 0x1b2 <DIO_SetPinDir+0xca>
 168:	08 95       	ret
 16a:	2a b3       	in	r18, 0x1a	; 26
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_SetPinDir+0x8e>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_SetPinDir+0x8a>
 17a:	80 95       	com	r24
 17c:	82 23       	and	r24, r18
 17e:	8a bb       	out	0x1a, r24	; 26
 180:	08 95       	ret
 182:	27 b3       	in	r18, 0x17	; 23
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_SetPinDir+0xa6>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_SetPinDir+0xa2>
 192:	80 95       	com	r24
 194:	82 23       	and	r24, r18
 196:	87 bb       	out	0x17, r24	; 23
 198:	08 95       	ret
 19a:	24 b3       	in	r18, 0x14	; 20
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_SetPinDir+0xbe>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_SetPinDir+0xba>
 1aa:	80 95       	com	r24
 1ac:	82 23       	and	r24, r18
 1ae:	84 bb       	out	0x14, r24	; 20
 1b0:	08 95       	ret
 1b2:	21 b3       	in	r18, 0x11	; 17
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_SetPinDir+0xd6>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_SetPinDir+0xd2>
 1c2:	80 95       	com	r24
 1c4:	82 23       	and	r24, r18
 1c6:	81 bb       	out	0x11, r24	; 17
 1c8:	08 95       	ret

000001ca <DIO_WritePin>:



void DIO_WritePin(uint8 Port ,uint8 Pin, uint8 Val)
{
	switch (Val)
 1ca:	44 23       	and	r20, r20
 1cc:	b9 f1       	breq	.+110    	; 0x23c <DIO_WritePin+0x72>
 1ce:	41 30       	cpi	r20, 0x01	; 1
 1d0:	09 f0       	breq	.+2      	; 0x1d4 <DIO_WritePin+0xa>
 1d2:	6b c0       	rjmp	.+214    	; 0x2aa <DIO_WritePin+0xe0>


	case DIO_PIN_HIGH :


		switch (Port)
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	89 f0       	breq	.+34     	; 0x1fa <DIO_WritePin+0x30>
 1d8:	28 f0       	brcs	.+10     	; 0x1e4 <DIO_WritePin+0x1a>
 1da:	82 30       	cpi	r24, 0x02	; 2
 1dc:	c9 f0       	breq	.+50     	; 0x210 <DIO_WritePin+0x46>
 1de:	83 30       	cpi	r24, 0x03	; 3
 1e0:	11 f1       	breq	.+68     	; 0x226 <DIO_WritePin+0x5c>
 1e2:	08 95       	ret
		{
		case DIO_PORTA :

			SET_BIT(PORTA,Pin);
 1e4:	2b b3       	in	r18, 0x1b	; 27
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_WritePin+0x26>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_WritePin+0x22>
 1f4:	82 2b       	or	r24, r18
 1f6:	8b bb       	out	0x1b, r24	; 27

			break;
 1f8:	08 95       	ret

		case DIO_PORTB :

			SET_BIT(PORTB,Pin);
 1fa:	28 b3       	in	r18, 0x18	; 24
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_WritePin+0x3c>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_WritePin+0x38>
 20a:	82 2b       	or	r24, r18
 20c:	88 bb       	out	0x18, r24	; 24

			break;
 20e:	08 95       	ret

		case DIO_PORTC :

			SET_BIT(PORTC,Pin);
 210:	25 b3       	in	r18, 0x15	; 21
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_WritePin+0x52>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_WritePin+0x4e>
 220:	82 2b       	or	r24, r18
 222:	85 bb       	out	0x15, r24	; 21

			break;
 224:	08 95       	ret

		case DIO_PORTD :

			SET_BIT(PORTD,Pin);
 226:	22 b3       	in	r18, 0x12	; 18
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_WritePin+0x68>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_WritePin+0x64>
 236:	82 2b       	or	r24, r18
 238:	82 bb       	out	0x12, r24	; 18

			break;
 23a:	08 95       	ret
		break;

		case DIO_PIN_LOW :


			switch (Port)
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	91 f0       	breq	.+36     	; 0x264 <DIO_WritePin+0x9a>
 240:	28 f0       	brcs	.+10     	; 0x24c <DIO_WritePin+0x82>
 242:	82 30       	cpi	r24, 0x02	; 2
 244:	d9 f0       	breq	.+54     	; 0x27c <DIO_WritePin+0xb2>
 246:	83 30       	cpi	r24, 0x03	; 3
 248:	29 f1       	breq	.+74     	; 0x294 <DIO_WritePin+0xca>
 24a:	08 95       	ret
			{
			case DIO_PORTA :

				CLR_BIT(PORTA,Pin);
 24c:	2b b3       	in	r18, 0x1b	; 27
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_WritePin+0x8e>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_WritePin+0x8a>
 25c:	80 95       	com	r24
 25e:	82 23       	and	r24, r18
 260:	8b bb       	out	0x1b, r24	; 27

				break;
 262:	08 95       	ret

			case DIO_PORTB :

				CLR_BIT(PORTB,Pin);
 264:	28 b3       	in	r18, 0x18	; 24
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_WritePin+0xa6>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_WritePin+0xa2>
 274:	80 95       	com	r24
 276:	82 23       	and	r24, r18
 278:	88 bb       	out	0x18, r24	; 24

				break;
 27a:	08 95       	ret

			case DIO_PORTC :

				CLR_BIT(PORTC,Pin);
 27c:	25 b3       	in	r18, 0x15	; 21
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_WritePin+0xbe>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_WritePin+0xba>
 28c:	80 95       	com	r24
 28e:	82 23       	and	r24, r18
 290:	85 bb       	out	0x15, r24	; 21

				break;
 292:	08 95       	ret

			case DIO_PORTD :

				CLR_BIT(PORTD,Pin);
 294:	22 b3       	in	r18, 0x12	; 18
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_WritePin+0xd6>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	6a 95       	dec	r22
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_WritePin+0xd2>
 2a4:	80 95       	com	r24
 2a6:	82 23       	and	r24, r18
 2a8:	82 bb       	out	0x12, r24	; 18
 2aa:	08 95       	ret

000002ac <main>:
//#include <avr/io.h>

#include "DCmotor.h"
int main(void)
{
	DCmotor_init();
 2ac:	0e 94 3e 00 	call	0x7c	; 0x7c <DCmotor_init>
	DCmotor_Move(1);
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 71 00 	call	0xe2	; 0xe2 <DCmotor_Move>
	DCmotor_Direction(clk_wise_dir);
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	70 e0       	ldi	r23, 0x00	; 0
 2c0:	cb 01       	movw	r24, r22
 2c2:	0e 94 50 00 	call	0xa0	; 0xa0 <DCmotor_Direction>
 2c6:	ff cf       	rjmp	.-2      	; 0x2c6 <main+0x1a>

000002c8 <TIMER0_INIT>:
	//OCR0= (16000000/(FREQ*2*256)-1);                          //From Data-sheet
	
	//uint8 pulse_time=(1024/16);
	
	//uint32 total_num=((Delay*1000)/pulse_time);
	OCR0=Delay;
 2c8:	83 b7       	in	r24, 0x33	; 51
 2ca:	88 60       	ori	r24, 0x08	; 8
 2cc:	83 bf       	out	0x33, r24	; 51
 2ce:	83 b7       	in	r24, 0x33	; 51
 2d0:	80 64       	ori	r24, 0x40	; 64
 2d2:	83 bf       	out	0x33, r24	; 51
 2d4:	83 b7       	in	r24, 0x33	; 51
 2d6:	80 62       	ori	r24, 0x20	; 32
 2d8:	83 bf       	out	0x33, r24	; 51
 2da:	83 b7       	in	r24, 0x33	; 51
 2dc:	81 60       	ori	r24, 0x01	; 1
 2de:	83 bf       	out	0x33, r24	; 51
 2e0:	83 b7       	in	r24, 0x33	; 51
 2e2:	82 60       	ori	r24, 0x02	; 2
 2e4:	83 bf       	out	0x33, r24	; 51
 2e6:	83 b7       	in	r24, 0x33	; 51
 2e8:	8f 77       	andi	r24, 0x7F	; 127
 2ea:	83 bf       	out	0x33, r24	; 51
 2ec:	8f b7       	in	r24, 0x3f	; 63
 2ee:	80 68       	ori	r24, 0x80	; 128
 2f0:	8f bf       	out	0x3f, r24	; 63
 2f2:	89 b7       	in	r24, 0x39	; 57
 2f4:	81 60       	ori	r24, 0x01	; 1
 2f6:	89 bf       	out	0x39, r24	; 57
 2f8:	08 95       	ret

000002fa <PWM0_Generate>:


//PWM-FAST-MODE prototype implementation
void PWM0_Generate(uint16 Duty_Cycle){
	
	OCR0= ((Duty_Cycle*256)/100)-1;
 2fa:	20 e0       	ldi	r18, 0x00	; 0
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	38 2f       	mov	r19, r24
 300:	36 95       	lsr	r19
 302:	27 95       	ror	r18
 304:	36 95       	lsr	r19
 306:	27 95       	ror	r18
 308:	ab e7       	ldi	r26, 0x7B	; 123
 30a:	b4 e1       	ldi	r27, 0x14	; 20
 30c:	0e 94 8d 01 	call	0x31a	; 0x31a <__umulhisi3>
 310:	96 95       	lsr	r25
 312:	87 95       	ror	r24
 314:	81 50       	subi	r24, 0x01	; 1
 316:	8c bf       	out	0x3c, r24	; 60
 318:	08 95       	ret

0000031a <__umulhisi3>:
 31a:	a2 9f       	mul	r26, r18
 31c:	b0 01       	movw	r22, r0
 31e:	b3 9f       	mul	r27, r19
 320:	c0 01       	movw	r24, r0
 322:	a3 9f       	mul	r26, r19
 324:	70 0d       	add	r23, r0
 326:	81 1d       	adc	r24, r1
 328:	11 24       	eor	r1, r1
 32a:	91 1d       	adc	r25, r1
 32c:	b2 9f       	mul	r27, r18
 32e:	70 0d       	add	r23, r0
 330:	81 1d       	adc	r24, r1
 332:	11 24       	eor	r1, r1
 334:	91 1d       	adc	r25, r1
 336:	08 95       	ret

00000338 <_exit>:
 338:	f8 94       	cli

0000033a <__stop_program>:
 33a:	ff cf       	rjmp	.-2      	; 0x33a <__stop_program>
